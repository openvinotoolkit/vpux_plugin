Change Log:
-----------
VPUXCompilerL0 6.3.0:
  - Bugfixes

VPUXCompilerL0 6.2.0:
  - Add support for NPU_DEFER_WEIGHTS_LOAD property

VPUXCompilerL0 6.1.0:
  - Add vclAllocatedExecutableCreate to compile a network allocating blob storage via given allocator

VPUXCompilerL0 6.0.0:
  - Add new data structure vcl_query_desc_t
  - Change vclQueryNetworkCreate to use a vcl_query_desc_t instead of uint8_t* modelIR and uint64_t modelIRSize

VPUXCompilerL0 5.10.0:
  - Model hash is now automatically passed to the compiler to bypass multi-cluster assignment pass.

VPUXCompilerL0 5.9.0:
  - The I/O metadata will be identified using indices instead of names when the plugin version is new enough.

VPUXCompilerL0 5.8.0:
  - Remove vpux_driver_compiler target and vpux_driver_compiler.h

VPUXCompilerL0 5.7.0:
  - Add support for optimization-level and performance-hint-override options of COMPILATION_MODE_PARAMS config

VPUXCompilerL0 5.6.2:
  - Assign fixed value to vcl_platform_t

VPUXCompilerL0 5.6.1:
  - Add npu_driver_compiler target and npu_driver_compiler.h

VPUXCompilerL0 5.6.0:
  - Add support for EXECUTION_MODE_HINT property.

VPUXCompilerL0 5.5.0:
  - Add support for NPU_BATCH_MODE option.

VPUXCompilerL0 5.4.1:
  - Add NPU_TILES to replace NPU_DPU_GROUPS.

VPUXCompilerL0 5.4.0:
  - Add support for INFERENCE_PRECISION_HINT compiler options.

VPUXCompilerL0 5.3.0:
  - Add support for NPU_MAX_TILES and NPU_STEPPING compiler options.

VPUXCompilerL0 5.2.0:
  - Add support for the legacy set of values corresponding to the "model priority" configuration.

VPUXCompilerL0 5.1.0:
  - Remove VPUXCompilerL0.h
  - Remove VPUXCompilerL0.dll
  - Remove VPUXCompilerL0.so

VPUXCompilerL0 5.0.0:
  - Support config key with NPU_ prefix

VPUXCompilerL0 4.2.0:
  - Change folder name from VPUXCompilerL0 to vpux_driver_compiler
  - Rename VPUXCompilerL0.h to vpux_driver_compiler.h
  - Code refactor

VPUXCompilerL0 4.1.0
  - Add 5000 to platform

VPUXCompilerL0 4.0.0
  - Support config key with VPU_ prefix instead of VPUX_ prefix

VPUXCompilerL0 3.0.0
  - Update VCLCompilerCreate and VCLProfilingCreate to support log handle
  - Add VCLLogHandleGetString, VCLLogHandleDestroy

VPUXCompilerL0 2.1.1:
  - Add VPUXLoader module with loaderTest.

VPUXCompilerL0 2.1.0:
  - Add vpuxCompilerL0Test based on gtest, including:
    - CompilerTest
    - CompilerTestThread
    - CompilerTestThread2
  - Remove the original compilerThreadTest and compilerThreadTest2, which have been already included in vpuxCompilerL0Test.

VPUXCompilerL0 2.0.0:
  - API Change
    - Use options to set all configs(include i/o precision and layout).
      - Set one precision(layout) to all inputs(outputs) is not supported now.
    - Update API version to 2.0.0, need to change the version in modelIRData.
  - Use debug_level to control package local log.

VPUXCompilerL0 1.3.0:
  - Add profiling API

VPUXCompilerL0 1.2.2:
  - Use OpenVINO static frontend.
  - API Change:
    - Move compilation mode to options.
    - Move compile log level to options.
    - Add optionsSize.

VPUXCompilerL0 1.2.1:
  - Add more config options.
  - Code refactor.
  - Work on master branch.
  - Use static OpenVINO runtime.

VPUXCompilerL0 1.1.2145:
  - Add profiling and change default debug level to info.

VPUXCompilerL0 1.1.2142:
  - Add compilerThreadTest2 to compile concurrently

VPUXCompilerL0 1.1.2141:
  - Use new VPUXCompilerL0.h to replace vpux_compiler_l0.h.
    - Change api.
    - Change example.

VPUXCompilerL0 1.1.2140:.
  - Add multiple compilers and multiple blobs features.
  - Rename the names of some structures.
  - API Change:
    - Add new strutures and change api arguments.
      - Change vpux_compiler_l0 to vcl.
      - Add compiler handle.
      - Add executable handle.
      - Add vcl_log_level_t.
      - Add vcl_platform_t.
      - Add vcl_compilation_mode.
    - Add createCompiler().
    - Remove updateCompilerProperties().
    - Change generateSerializableBlob() arguments.
    - Change getSeriablizableBlob() arguments.
    - Add destoryExecutable().
    - Change deinitCompiler() to destroyCompiler().
  - Change test example to follow new API.
  - Add compilerThreadTest.
  - Fix the error of reading models.

VPUXCompilerL0 1.1.2139:
  - Change parameter type of generateSerializableBlob function.
    - Change modelIR structure and type.

VPUXCompilerL0 1.1.2138:
  - Update VPUX-plugin to releases/2021/4_vpux_ww37.

VPUXCompilerL0 1.1.2137:
  - Remove gc_api.
  - Have both Release and Debug version built with OneCore compliance.

VPUXCompilerL0 1.1.2136:
  - Fix the crash issue of reusing library.
  - API Change:
    - split old generateSerializableBlob to two functions.
      - add model_ir type.
      - gc_result_t generateSerializableBlob(void* modelIR, uint32_t* blobSize).
      - gc_result_t getSerializableBlob(uint8_t* blob, uint32_t blobSize).
  - Workaround for fixing heap leaking issue.
  - Remove unnecessary fucSharedTests dependency.
  - Remove tbb library dependency.
  - Scroll VPUX-plugin back to releases/2021/4_vpux_ww34 as WW36 dKMB Release indicates.

VPUXCompilerL0 1.1.2135:
  - Update VPUX-plugin to releases/2021/4_vpux_ww35
  - Remove accidentally included MCM compiler components.

VPUXCompilerL0 1.1.2134:
  - Add new branch VPUXCompilerL0.
    - Rename library to VPUXCompilerL0.dll.
    - Rename convertTest to compilerTest.
    - Rename converter.h to vpux_compiler_l0.h.
    - Rename getConverter to getVPUXCompilerL0.
    - Rename vpux_converter_t to vpux_compiler_l0_t.
    - Rename vpux_converter_methods_t to vpux_compiler_l0_methods_t.

umdConverter 1.1.2134:
  - API change:
    - Add converter.h to show umdConverter interface.
      - Use getConverter as umd_converter.dll entrance, use vpux_converter_t to
        represent umdConverter.
      - Move methods to vpux_converter_methods_t.
      - Add getCompilerProperties, updateCompilerConfig, deinitCompiler and keep
        getSerializableBlob in vpux_converter_methods_t.
    - Change getSerializableBlob usage, shall call it twice, the first time to
      get blob size, and the second time to fill the blob data.
  - Remove MCM compiler support, only use vpux compiler now.
    - The fronend_mcm and mcmCompiler lib are removed.
  - Remove inference_engine_ir_reader library.
    - Use ir_parser utilities inside the converter instead of loading another reader
      library.

umdConverter 1.1:
  - Use getSerializableBlob as entrance to umd_converter.dll, can convert xml
    and bin file from OPENVINO to blob file.
  - Use convertTest as demo of umd_converter.dll demo.
