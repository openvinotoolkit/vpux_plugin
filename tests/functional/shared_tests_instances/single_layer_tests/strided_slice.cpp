//
// Copyright (C) 2022-2024 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <vector>

#include "single_op_tests/strided_slice.hpp"
#include "vpu_ov2_layer_test.hpp"

namespace ov {
namespace test {

class StridedSliceLayerTestCommon : public StridedSliceLayerTest, virtual public VpuOv2LayerTest {};

class StridedSliceNCELayerTest : public StridedSliceLayerTestCommon {};
class StridedSliceTilingLayerTest : public StridedSliceLayerTestCommon {};

TEST_P(StridedSliceLayerTestCommon, NPU3720_SW) {
    setReferenceSoftwareMode();
    run(Platform::NPU3720);
}

TEST_P(StridedSliceNCELayerTest, NPU3720_HW) {
    setDefaultHardwareMode();
    run(Platform::NPU3720);
}

TEST_P(StridedSliceTilingLayerTest, NPU3720_HW) {
    setDefaultHardwareMode();
    run(Platform::NPU3720);
}

TEST_P(StridedSliceLayerTestCommon, NPU4000_SW) {
    setReferenceSoftwareMode();
    run(Platform::NPU4000);
}
}  // namespace test
}  // namespace ov

using ov::test::StridedSliceLayerTestCommon;
using ov::test::StridedSliceNCELayerTest;
using ov::test::StridedSliceTilingLayerTest;

namespace {

std::vector<ov::test::StridedSliceSpecificParams> tests = {
        // custom tests
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 32, 12, 64}})),
         {0, 0, 1, 0},
         {1, 32, 12, 64},
         {1, 1, 1, 1},
         {1, 1, 0, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 32, 64, 128}})),
         {0, 0, 53, 0},
         {1, 32, 64, 128},
         {1, 1, 1, 1},
         {1, 1, 0, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 32, 64, 256}})),
         {0, 0, 54, 0},
         {1, 32, 64, 128},
         {1, 1, 1, 1},
         {1, 1, 0, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 32, 64, 512}})),
         {0, 0, 55, 0},
         {1, 32, 64, 128},
         {1, 1, 1, 1},
         {1, 1, 0, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},

        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32}})),
         {0, 0, 0},
         {0, 0, 0},
         {1, 1, 1},
         {1, 1, 1},
         {1, 1, 1},
         {1, 0, 0},
         {0, 0, 0},
         {0, 0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32}})),
         {0, 0, 0},
         {0, 0, 0},
         {1, 1, 1},
         {1, 1, 1},
         {1, 1, 1},
         {0, 1, 0},
         {0, 0, 0},
         {0, 0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32}})),
         {0, 0, 0},
         {0, 0, 0},
         {1, 1, 1},
         {1, 1, 1},
         {1, 1, 1},
         {0, 0, 1},
         {0, 0, 0},
         {0, 0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32, 32}})),
         {0, 0},
         {0, 0},
         {1, 1},
         {1, 1},
         {1, 1},
         {0, 0},
         {1, 0},
         {0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32, 32}})),
         {0, 0},
         {0, 0},
         {1, 1},
         {1, 1},
         {1, 1},
         {0, 0},
         {0, 1},
         {0, 0}},

        // from MKLDNN plugin
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32}})),
         {0, 20},
         {32, 30},
         {1, 1},
         {0, 0},
         {0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 20}})),
         {2, 10},
         {32, 20},
         {1, 1},
         {0, 0},
         {0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 20}})),
         {2, 10},
         {32, 20},
         {1, 2},
         {0, 1},
         {1, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 20}})),
         {2, 10},
         {32, 20},
         {2, 1},
         {0, 0},
         {1, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 32, 32}})),
         {0, 2, 5, 4},
         {1, 4, 28, 27},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 32, 20}})),
         {0, 1, 0, 0},
         {1, 3, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 5, 32, 20}})),
         {0, 0, 10, 0},
         {1, 3, 20, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 1, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 32, 32}})),
         {0, 0, 20, 20},
         {1, 5, 25, 26},
         {1, 1, 1, 2},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 5, 32, 32}})),
         {0, 0, 0, 20},
         {1, 2, 30, 30},
         {1, 1, 2, 1},
         {0, 0, 0, 1},
         {0, 1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 32, 20}})),
         {0, 0, 2, 10},
         {1, 3, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 1, 1},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 5, 32, 32}})),
         {0, 1, 0, 10},
         {1, 5, 32, 30},
         {1, 1, 1, 1},
         {0, 1, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 32, 20}})),
         {0, 1, 2, 10},
         {1, 5, 32, 18},
         {1, 1, 1, 2},
         {0, 0, 1, 0},
         {0, 0, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 8, 32, 20}})),
         {0, 0, 2, 10},
         {1, 8, 32, 18},
         {1, 2, 1, 2},
         {0, 0, 1, 0},
         {0, 0, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 8, 32, 20}})),
         {0, 0, 10},
         {0, 32, 18},
         {1, 1, 1},
         {1, 1, 0},
         {1, 1, 0},
         {},
         {},
         {1, 0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 8, 32, 20}})),
         {0, 0, 10},
         {1, 0, 20},
         {1, 1, 1},
         {1, 1, 0},
         {0, 1, 1},
         {},
         {},
         {0, 1, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 8, 32, 20}})),
         {0, 4, 10},
         {2, 8, 0},
         {1, 1, 1},
         {1, 0, 1},
         {1, 1, 1},
         {},
         {},
         {0, 0, 1}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 16, 32, 32}})),
         {0, 0, 5, 4},
         {1, 16, 28, 27},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 10, 10}})),
         {0, 16, 0, 0},
         {1, 32, 10, 10},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 16, 32, 20}})),
         {0, 0, 10, 0},
         {1, 16, 20, 10},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 32}})),
         {0, 0, 20, 20},
         {1, 32, 25, 25},
         {1, 1, 1, 1},
         {0, 1, 0, 0},
         {0, 1, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 48, 32, 32}})),
         {0, 16, 0, 20},
         {1, 32, 32, 30},
         {1, 1, 1, 2},
         {1, 0, 1, 0},
         {1, 0, 1, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 20}})),
         {0, 16, 2, 10},
         {1, 32, 32, 20},
         {1, 1, 2, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 64, 32, 20}})),
         {0, 16, 0, 0},
         {2, 64, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 64, 32, 20}})),
         {0, 32, 0, 0},
         {2, 50, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 64, 32, 20}})),
         {0, 0, 0, 0},
         {2, 12, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 64, 32, 20}})),
         {0, -16, 0, 10},
         {2, 100, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 20}})),
         {0, -16, 0, 0},
         {2, -4, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 20}})),
         {0, -32, 0, 0},
         {2, -12, 32, 20},
         {1, 1, 1, 1},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 20}})),
         {0, 10},
         {0, 20},
         {1, 1},
         {1, 0},
         {1, 0},
         {},
         {},
         {1, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 32, 32, 20}})),
         {0, 16, 0},
         {2, 32, 0},
         {1, 1, 1},
         {1, 0, 1},
         {1, 1, 1},
         {},
         {},
         {0, 0, 1}},
};

std::vector<ov::test::StridedSliceSpecificParams> precommit_tests = {
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 20}})),
         {2, 10},
         {32, 20},
         {1, 2},
         {0, 1},
         {1, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{32, 32, 32}})),
         {0, 0},
         {0, 0},
         {1, 2},
         {1, 1},
         {1, 1},
         {0, 0},
         {0, 1},
         {0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 5, 32, 32}})),
         {0, 0, 0, 20},
         {1, 2, 30, 30},
         {1, 1, 2, 1},
         {0, 0, 0, 1},
         {0, 1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{5, 16, 16, 16}})),
         {1, 4, 5, 10},
         {0, 0, 0, 0},
         {2, 7, 5, 3},
         {0, 0, 0, 0},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 48, 32, 32}})),
         {0, 16, 0, 20},
         {1, 32, 32, 30},
         {1, 1, 1, 2},
         {1, 0, 1, 0},
         {1, 0, 1, 0},
         {},
         {},
         {}},
};

std::vector<ov::test::StridedSliceSpecificParams> nce_tests = {
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{5, 16, 16, 16}})),
         {1, 4, 5, 10},
         {0, 0, 0, 0},
         {2, 7, 5, 3},
         {0, 0, 0, 0},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 48, 32, 32}})),
         {0, 16, 0, 20},
         {1, 32, 32, 30},
         {1, 1, 1, 2},
         {1, 0, 1, 0},
         {1, 0, 1, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 416, 416}})),
         {0, 0, 0, 0},
         {1, 3, 416, 416},
         {1, 1, 2, 2},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 416, 416}})),
         {0, 0, 1, 0},
         {1, 3, 416, 416},
         {1, 1, 2, 2},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 416, 416}})),
         {0, 0, 0, 1},
         {1, 3, 416, 416},
         {1, 1, 2, 2},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 416, 416}})),
         {0, 0, 1, 1},
         {1, 3, 416, 416},
         {1, 1, 2, 2},
         {0, 0, 0, 0},
         {0, 0, 0, 0},
         {},
         {},
         {}},
};

std::vector<ov::test::StridedSliceSpecificParams> tests_5d = {
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 20, 32, 32}})),
         {0, 0, 0, 0, 0},
         {1, 5, 20, 32, 32},
         {1, 1, 1, 1, 2},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 1, 1, 51, 1}})),
         {0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {1, 1, 1, 2, 1},
         {1, 1, 0, 1, 1},
         {1, 1, 0, 1, 1},
         {0, 0, 0, 0, 0},
         {0, 0, 1, 0, 0},
         {0, 0, 0, 0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 5, 20, 32, 32}})),
         {0, 0, 0, 0, 0},
         {1, 5, 20, 32, 32},
         {1, 2, 2, 2, 2},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 8, 8, 8, 8}})),
         {0, 0, 0, 0, 0},
         {1, 8, 8, 8, 8},
         {1, 2, 2, 2, 2},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 8, 8, 8, 8}})),
         {0, 2, 3, 1, 1},
         {1, 8, 8, 8, 8},
         {1, 2, 2, 2, 2},
         {0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0},
         {},
         {},
         {}},
};

std::vector<ov::test::StridedSliceSpecificParams> tiling_tests = {
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 8, 80, 1280}})),
         {0, 0, 0, 0},
         {0, 0, 2147483647, 0},  // The 2147483647 value from ends is supported beacause of ResolveStridedSlice pass.
         {1, 1, 4, 1},
         {1, 1, 0, 1},
         {1, 1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 640, 640}})),
         {0, 0, 0, 0},
         {0, 0, 2147483647, 0},  // The 2147483647 value from ends is supported beacause of ResolveStridedSlice pass.
         {1, 1, 2, 1},
         {1, 1, 1, 1},
         {1, 1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 3, 640, 640}})),
         {0, 0, 0, 0},
         {0, 0, 0, 2147483647},  // The 2147483647 value from ends is supported beacause of ResolveStridedSlice pass.
         {1, 1, 1, 2},
         {1, 1, 1, 1},
         {1, 1, 1, 0},
         {},
         {},
         {}},
};

[[maybe_unused]] std::vector<ov::test::StridedSliceSpecificParams> testsWithNegativeStrides = {
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{10, 12}})),
         {-1, 1},
         {-9999, 0},
         {-1, 1},
         {0, 1},
         {0, 1},
         {0, 0},
         {0, 0},
         {0, 0}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 2, 4, 2}})),
         {1, 0, 0, 0},
         {1, 2, 4, 2},
         {1, 1, -2, -1},
         {1, 1, 1, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{2, 2, 4, 2}})),
         {1, 0, 0, 0},
         {1, 2, 4, 2},
         {1, 1, -2, -1},
         {0, 1, 1, 1},
         {1, 1, 1, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{5, 5, 5, 5}})),
         {-1, 0, -1, 0},
         {-50, 0, -60, 0},
         {-1, 1, -1, 1},
         {0, 0, 0, 0},
         {0, 1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 9, 0},
         {0, 7, 0},
         {-1, -1, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 7, 0},
         {0, 9, 0},
         {-1, 1, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 4, 0},
         {0, 9, 0},
         {-1, 2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 4, 0},
         {0, 10, 0},
         {-1, 2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 9, 0},
         {0, 4, 0},
         {-1, -2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 10, 0},
         {0, 4, 0},
         {-1, -2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, 11, 0},
         {0, 0, 0},
         {-1, -2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
        {ov::test::static_shapes_to_test_representation(std::vector<ov::Shape>({{1, 12, 100}})),
         {0, -6, 0},
         {0, -8, 0},
         {-1, -2, -1},
         {1, 0, 1},
         {1, 0, 1},
         {},
         {},
         {}},
};

const std::vector<ov::element::Type> modelTypes = {ov::element::f16};

INSTANTIATE_TEST_SUITE_P(smoke_precommit_StridedSlice, StridedSliceLayerTestCommon,
                         ::testing::Combine(::testing::ValuesIn(precommit_tests), ::testing::ValuesIn(modelTypes),
                                            ::testing::Values(ov::test::utils::DEVICE_NPU)),
                         StridedSliceLayerTestCommon::getTestCaseName);

INSTANTIATE_TEST_SUITE_P(smoke_StridedSlice_5D, StridedSliceLayerTestCommon,
                         ::testing::Combine(::testing::ValuesIn(tests_5d), ::testing::ValuesIn(modelTypes),
                                            ::testing::Values(ov::test::utils::DEVICE_NPU)),
                         StridedSliceLayerTestCommon::getTestCaseName);

INSTANTIATE_TEST_SUITE_P(smoke_precommit_StridedSlice, StridedSliceNCELayerTest,
                         ::testing::Combine(::testing::ValuesIn(nce_tests), ::testing::ValuesIn(modelTypes),
                                            ::testing::Values(ov::test::utils::DEVICE_NPU)),
                         StridedSliceNCELayerTest::getTestCaseName);

INSTANTIATE_TEST_SUITE_P(smoke_tiling_StridedSlice, StridedSliceTilingLayerTest,
                         ::testing::Combine(::testing::ValuesIn(tiling_tests), ::testing::ValuesIn(modelTypes),
                                            ::testing::Values(ov::test::utils::DEVICE_NPU)),
                         StridedSliceTilingLayerTest::getTestCaseName);

}  // namespace
