//
// Copyright (C) 2024 Intel Corporation.
// SPDX-License-Identifier: Apache 2.0
//

// RUN: vpux-opt --split-input-file --mlir-print-elementsattrs-with-hex-if-larger=512 --init-compiler="vpu-arch=%arch%" --handle-u16-fake-quantize="enable-u16-fake-quantize-to-scale-shift-conversion=false" %s | FileCheck %s
// REQUIRES: arch-NPU37XX || arch-NPU40XX

// CHECK-LABEL: @RemoveFQU16
// CHECK-SAME:     ([[ARG0:%.+]]: tensor<1x3x640x640xf16>)
func.func @RemoveFQU16(%arg0: tensor<1x3x640x640xf16>) -> tensor<1x4x640x640xf16> {
    %cst = const.Declare tensor<1x4x1x1xf16> = dense<[[[[0.539961219]], [[-1.85364282]], [[1.99483931]], [[-2.17146444]]]]> : tensor<1x4x1x1xf32>, [#const.CastElemType<f16>]
    %cst_0 = const.Declare tensor<4x3x3x3xf16> = dense<[[[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]], [[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]],[[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]], [[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]]]> : tensor<4x3x3x3xf32>, [#const.CastElemType<f16>]
    %cst_1 = const.Declare tensor<1x1x1x1xf16> = dense<57.9222679> : tensor<1x1x1x1xf32>, [#const.CastElemType<f16>]
    %cst_2 = const.Declare tensor<1x1x1x1xf16> = dense<-57.1374702> : tensor<1x1x1x1xf32>, [#const.CastElemType<f16>]
    %0 = IE.Convolution(%arg0, %cst_0, %cst) {dilations = [1, 1], pads_begin = [1, 1], pads_end = [1, 1], strides = [1, 1]} : tensor<1x3x640x640xf16>, tensor<4x3x3x3xf16>, tensor<1x4x1x1xf16> -> tensor<1x4x640x640xf16>
    %1 = IE.FakeQuantize(%0, %cst_2, %cst_1, %cst_2, %cst_1) {auto_broadcast = #IE.auto_broadcast_type<NUMPY>, levels = 65536 : i64} : tensor<1x4x640x640xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16> -> tensor<1x4x640x640xf16>
    %2 = IE.Sigmoid(%1) : tensor<1x4x640x640xf16> -> tensor<1x4x640x640xf16>
    return %2 : tensor<1x4x640x640xf16>

    // CHECK-DAG:   [[CST_0:%.+]] = const.Declare tensor<1x4x1x1xf16> =
    // CHECK-SAME{LITERAL}:   dense<[[[[0.539961219]], [[-1.85364282]], [[1.99483931]], [[-2.17146444]]]]> : tensor<1x4x1x1xf32>, [#const.CastElemType<f16>]
    // CHECK-DAG:   [[CST_1:%.+]] = const.Declare tensor<4x3x3x3xf16> =
    // CHECK-SAME{LITERAL}:   dense<[[[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]], [[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]], [[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]], [[[-7.72567116E-4, 0.00231770123, 0.00103008945], [0.00154513423, 0.00386283547, 0.00231770123], [0.00128761178, 2.57522363E-4, 7.72567116E-4]], [[-7.72567116E-4, 0.00360531313, 0.0020601789], [0.00154513423, 0.0056654918, 0.00231770123], [0.000000e+00, 2.57522363E-4, -7.72567116E-4]], [[2.57522363E-4, 0.0066955816, 0.00180265657], [0.0028327459, 0.00515044713, 7.72567116E-4], [0.00154513423, -0.00103008945, -0.00154513423]]]]> : tensor<4x3x3x3xf32>, [#const.CastElemType<f16>]
    // CHECK:       [[CONV:%.+]] = IE.Convolution([[ARG0]], [[CST_1]], [[CST_0]]) {dilations = [1, 1], pads_begin = [1, 1], pads_end = [1, 1], strides = [1, 1]} : tensor<1x3x640x640xf16>, tensor<4x3x3x3xf16>, tensor<1x4x1x1xf16> -> tensor<1x4x640x640xf16>
    // CHECK:       [[SIGMOID:%.+]] = IE.Sigmoid([[CONV]]) : tensor<1x4x640x640xf16> -> tensor<1x4x640x640xf16>

    // CHECK: return [[SIGMOID]]
}

// -----

// CHECK-LABEL: @ReplaceFQU16WithReLU
// CHECK-SAME:     ([[ARG0:%.+]]: tensor<1x4x640x640xf16>)
func.func @ReplaceFQU16WithReLU(%arg0: tensor<1x4x640x640xf16>) -> tensor<1x4x640x640xf16> {
    %cst = const.Declare tensor<1x1x1x1xf16> = dense<0.000000e+00> : tensor<1x1x1x1xf32>, [#const.CastElemType<f16>]
    %cst_0 = const.Declare tensor<1x1x1x1xf16> = dense<57.1374702> : tensor<1x1x1x1xf32>, [#const.CastElemType<f16>]
    %0 = IE.FakeQuantize(%arg0, %cst, %cst_0, %cst, %cst_0) {auto_broadcast = #IE.auto_broadcast_type<NUMPY>, levels = 65536 : i64} : tensor<1x4x640x640xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16>, tensor<1x1x1x1xf16> -> tensor<1x4x640x640xf16>
    %1 = IE.Sigmoid(%0) : tensor<1x4x640x640xf16> -> tensor<1x4x640x640xf16>
    return %1 : tensor<1x4x640x640xf16>

    // CHECK: [[RELU:%.+]] = IE.ReLU([[ARG0]]) : tensor<1x4x640x640xf16> -> tensor<1x4x640x640xf16>
    // CHECK: [[SIGMOID:%.+]] = IE.Sigmoid([[RELU]]) : tensor<1x4x640x640xf16> -> tensor<1x4x640x640xf16>

    // CHECK: return [[SIGMOID]]
}
