//
// Copyright (C) 2022-2023 Intel Corporation.
// SPDX-License-Identifier: Apache 2.0
//

// RUN: vpux-opt --split-input-file --init-compiler="vpu-arch=%arch% allow-custom-values=true" --tiling-strategy-assignment="tiling-mode=ISOLATED" %s | FileCheck %s
// REQUIRES: DISABLED
// TODO: #-81889 restore arch-NPU37XX and arch-NPU40XX

#NHWC = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>

!qElemType = !quant.uniform<u8:f16:3, {0.1:127, 0.2:127, 0.3:127, 0.4:127, 0.5:127, 0.6:127, 0.7:127, 0.8:127}>

// // 1x16x4x8xf16 + weights_table + profiling buffer
IE.TileResource 1 of @NCE at 1.300000e+03 MHz {
    IE.MemoryResource 4800 bytes of @CMX_NN
}

// CHECK-LABEL: func.func @MultiAxesAndPerAxisQuant
// CHECK-SAME:        [[INPUT:%arg[0-9]]]: tensor<1x32x8x8x!qElemType, {order = #NHWC}>
func.func @MultiAxesAndPerAxisQuant(
        %input: tensor<1x32x8x8x!qElemType, {order = #NHWC}>)
            -> tensor<1x32x8x8x!qElemType, {order = #NHWC}> {
    %weights_table = const.Declare tensor<32x1x1x4xsi32> = dense<1> : tensor<32x1x1x4xsi32>

    %0 = VPU.NCE.MaxPool(%input, %weights_table) {
        kernel_size = [3, 3],
        pad = #VPU.Padding<left = 1 : i64, right = 1 : i64, top = 1 : i64, bottom = 1 : i64>,
        strides = [1, 1]
    } -> tensor<1x32x8x8x!qElemType, {order = #NHWC}>

    return %0 : tensor<1x32x8x8x!qElemType, {order = #NHWC}>

    // CHECK-DAG:       [[WEIGHTS_TABLE:%.+]] = const.Declare tensor<32x1x1x4xsi32>
    // CHECK-SAME:      = dense<1> : tensor<32x1x1x4xsi32>

    // CHECK:       [[MAXPOOL:%.+]] = VPU.NCE.MaxPool(%arg0, [[WEIGHTS_TABLE]])
    // CHECK-SAME:          kernel_size = [3, 3],
    // CHECK-SAME:          pad = #VPU.Padding<left = 1 : i64, right = 1 : i64, top = 1 : i64, bottom = 1 : i64>,
    // CHECK-SAME:          strides = [1, 1],
    // CHECK-SAME:          tilingStrategy = [1, 1, 8, 1]}
    // CHECK-SAME:      -> tensor<1x32x8x8x!qElemType, {order = #NHWC}>

    // CHECK:       return [[MAXPOOL]] : tensor<1x32x8x8x!qElemType, {order = #NHWC}>
}

// -----

#NHWC = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>
#NCHW = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>

IE.TileResource 1 of @NCE at 1.300000e+03 MHz {
    IE.MemoryResource 1000000 bytes of @CMX_NN
}

// CHECK-LABEL: func.func @SplitNCEConvOverHAndAlignW
// CHECK-SAME:          [[INPUT:%arg[0-9]]]: tensor<1x3x224x224xf16>
func.func @SplitNCEConvOverHAndAlignW(%arg0: tensor<1x3x224x224xf16>) -> tensor<1x64x111x111xf16, {order = #NHWC}> {
    %weights = const.Declare tensor<64x1x1x32xf16, {order = #NHWC}> = dense<1.000000e+00> : tensor<64x3x3x3xf16>, [#const.Reorder<#NHWC>, #const.Reorder<#NCHW>, #const.Reshape<[64, 1, 1, 27]>, #const.PadWithZero<[0, 0, 0, 0], [0, 0, 0, 5]>, #const.Reorder<#NHWC>]
    %weights_table = const.Declare tensor<64x1x1x4xsi32> = dense<10> : tensor<64x1x1x4xsi32>

    %0 = VPU.NCE.Convolution(%arg0, %weights, %weights_table ) {
        pad = #VPU.Padding<left = 0 : i64, right = 0 : i64, top = 0 : i64, bottom = 0 : i64>,
        rawFilterShape = [64, 3, 3, 3],
        strides = [2, 2]
    } -> tensor<1x64x111x111xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>

    return %0 : tensor<1x64x111x111xf16, {order = #NHWC}>

    // CHECK-DAG:       [[WEIGHTS_TABLE:%.+]] = const.Declare tensor<64x1x1x4xsi32> = dense<10> : tensor<64x1x1x4xsi32>
    // CHECK-DAG:       [[WEIGHTS:%.+]] = const.Declare tensor<64x1x1x32xf16, {order = #NHWC}> = dense<1.000000e+00> : tensor<64x3x3x3xf16>, [#const.Reorder<#NHWC>, #const.Reorder<#NCHW>, #const.Reshape<[64, 1, 1, 27]>, #const.PadWithZero<[0, 0, 0, 0], [0, 0, 0, 5]>, #const.Reorder<#NHWC>]

    // CHECK:           [[CONV_0:%.+]] = VPU.NCE.Convolution(%arg0, [[WEIGHTS]], [[WEIGHTS_TABLE]])
    // CHECK-SAME:           pad = #VPU.Padding<left = 0 : i64, right = 0 : i64, top = 0 : i64, bottom = 0 : i64>,
    // CHECK-SAME:           rawFilterShape = [64, 3, 3, 3], strides = [2, 2], tilingStrategy = [1, 1, 2, 1]}
    // CHECK-SAME:              -> tensor<1x64x111x111xf16, {order = #NHWC}>

    // CHECK:           return [[CONV_0]] : tensor<1x64x111x111xf16, {order = #NHWC}>
}

// -----

#SparsityCompression = #VPU.SparsityCompression<
                            axis = 0 : i64,
                            numElems = dense<"tensor<512xi64>,
                            alignment = 16 : i64>

module @Test {
    IE.TileResource 1 of @NCE {
    IE.MemoryResource 1327104 bytes of @CMX_NN_FragmentationAware
    IE.MemoryResource 1474560 bytes of @CMX_NN {VPU.bandwidth = 64 : i64, VPU.derateFactor = 1.000000e+00 : f64}
    }

    func.func @TileNceConvOpWithSparseFilter(
            %input: tensor<1x512x46x60xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>,
            %bias: tensor<512x1x1x4xsi32>) {
        %sparsity_map = const.Declare tensor<512x1x1x4608xi1> = dense<1.0> : tensor<512x512x3x3xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>, [#const.GetSparsityMap]
        %data = const.Declare tensor<512x512x3x3xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}> = dense<1.0> : tensor<512x512x3x3xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>, [#const.Sparsify<false>]
        %filter = VPU.GroupSparseTensor(%data, %sparsity_map) {
            is_weights,
            sparsity_compression = #SparsityCompression
            } -> !VPU.SparseTensor<
                        data=tensor<512x512x3x3xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>,
                        sparsity_map=tensor<512x1x1x4608xi1>,
                        is_weights,
                        #SparsityCompression>
        %0 = VPU.NCE.Convolution(%input, %filter, %bias) {
            mpe_engine = #VPU.MPEEngine37XX<mode = <SCL>>,
            pad = #VPU.Padding<left = 1 : i64, right = 1 : i64, top = 1 : i64, bottom = 1 : i64>,
            ppe = #VPU.PPEFp<mode = <LRELU>,
            clamp_low = 0.000000e+00 : f64,
            clamp_high = 3.4028234663852886E+38 : f64,
            scale = [1.000000e+00],
            prelu_alpha = [1.000000e+00],
            bias = [0.000000e+00],
            adder = [0.000000e+00]>,
            rawFilterShape = [512, 512, 3, 3],
            strides = [1, 1]
            } -> tensor<1x512x46x60xf16, {order = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>}>
        return

        // CHECK: tilingStrategy = [1, 2, 45, 1]
    }
}
